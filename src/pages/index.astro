// Optimized form handler with performance enhancements
(function() {
  const WORKER_URL = 'https://itc-backend.your-subdomain.workers.dev';
  const TIMEOUT_MS = 10000;
  const submittingForms = new WeakSet();
  
  // Cache DOM queries
  const formContainer = document.body; // or specific container
  
  // Single event listener using delegation (more efficient than multiple listeners)
  formContainer.addEventListener('submit', handleFormSubmit);
  
  async function handleFormSubmit(e) {
    const form = e.target.closest('.contact-form');
    if (!form) return;
    
    e.preventDefault();
    
    // Prevent duplicate submissions
    if (submittingForms.has(form)) return;
    submittingForms.add(form);
    
    // Get submit button for loading state
    const submitBtn = form.querySelector('[type="submit"]');
    const originalText = submitBtn?.textContent;
    
    try {
      // Show loading state
      if (submitBtn) {
        submitBtn.disabled = true;
        submitBtn.textContent = 'Sending...';
      }
      
      // Fast form data extraction
      const formData = new FormData(form);
      const data = Object.fromEntries([
        ['firstName', formData.get('first-name')],
        ['lastName', formData.get('last-name')],
        ['email', formData.get('email')],
        ['service', formData.get('service')],
        ['message', formData.get('message')]
      ].filter(([_, value]) => value)); // Remove empty values
      
      // Basic client-side validation
      if (!data.email || !data.message) {
        throw new Error('Email and message are required');
      }
      
      // Create abort controller for timeout
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), TIMEOUT_MS);
      
      const response = await fetch(WORKER_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      
      if (result.success) {
        showFeedback(form, 'success', `Success! AI Response: ${result.aiReply}`);
        form.reset();
      } else {
        throw new Error(result.error || 'Submission failed');
      }
      
    } catch (error) {
      const message = error.name === 'AbortError' 
        ? 'Request timed out. Please try again.'
        : `Error: ${error.message}`;
      showFeedback(form, 'error', message);
      
    } finally {
      // Reset button state
      if (submitBtn) {
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
      }
      submittingForms.delete(form);
    }
  }
  
  // Efficient feedback system (replace alerts)
  function showFeedback(form, type, message) {
    // Remove existing feedback
    const existingFeedback = form.querySelector('.form-feedback');
    existingFeedback?.remove();
    
    // Create new feedback element
    const feedback = document.createElement('div');
    feedback.className = `form-feedback form-feedback--${type}`;
    feedback.textContent = message;
    feedback.style.cssText = `
      padding: 12px;
      margin-top: 10px;
      border-radius: 4px;
      background: ${type === 'success' ? '#d4edda' : '#f8d7da'};
      border: 1px solid ${type === 'success' ? '#c3e6cb' : '#f5c6cb'};
      color: ${type === 'success' ? '#155724' : '#721c24'};
    `;
    
    form.appendChild(feedback);
    
    // Auto-remove after 5 seconds
    setTimeout(() => feedback.remove(), 5000);
  }
  
  // Optional: Add input debouncing for real-time validation
  let validationTimeout;
  formContainer.addEventListener('input', (e) => {
    if (!e.target.closest('.contact-form')) return;
    
    clearTimeout(validationTimeout);
    validationTimeout = setTimeout(() => {
      validateField(e.target);
    }, 300);
  });
  
  function validateField(field) {
    const form = field.closest('.contact-form');
    if (!form) return;
    
    // Remove existing field errors
    const errorElement = field.parentNode.querySelector('.field-error');
    errorElement?.remove();
    field.classList.remove('error');
    
    // Basic validation
    let error = '';
    if (field.name === 'email' && field.value) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(field.value)) {
        error = 'Please enter a valid email address';
      }
    } else if (field.required && !field.value.trim()) {
      error = 'This field is required';
    }
    
    if (error) {
      field.classList.add('error');
      const errorEl = document.createElement('div');
      errorEl.className = 'field-error';
      errorEl.textContent = error;
      errorEl.style.cssText = 'color: #721c24; font-size: 0.875em; margin-top: 4px;';
      field.parentNode.appendChild(errorEl);
    }
  }
})();
